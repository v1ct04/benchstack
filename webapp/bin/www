#!/usr/bin/env node

const cluster = require('cluster'),
    parseArgs = require('command-line-args'),
         http = require('http'),
  dbConfigGen = require('../lib/dbconfig'),
    createApp = require('../lib/app')

const numCPUs = require('os').cpus().length;

const opts = parseArgs([
  {
    name: 'single',
    alias: 's',
    type: Boolean
  },
  {
    name: 'port',
    alias: 'p',
    type: parseInt
  },
  {
    name: 'log',
    alias: 'l',
    type: Boolean
  },
  {
    name: 'logFormat',
    alias: 'f',
    type: String,
    defaultValue: 'dev'
  }
].concat(dbConfigGen.optionList))

const dbConfig = dbConfigGen(opts)
const port = opts.port || normalizePort(process.env.npm_package_config_port) || 3000
const logFormat = opts.log && opts.logFormat

if (cluster.isMaster && !opts.single) {
  // Fork workers.
  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  startServer()
}

function startServer() {
  var app = createApp(dbConfig, port, logFormat);
  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
